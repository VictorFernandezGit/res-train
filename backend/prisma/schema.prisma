generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Org {
  id        String        @id @default(cuid())
  name      String
  createdAt DateTime      @default(now())
  auditLogs AuditLog[]
  cocktails Cocktail[]
  lessons   Lesson[]
  media     LessonMedia[]
  liquors   Liquor[]
  modules   Module[]
  quizzes   Quiz[]
  users     User[]
  wines     Wine[]
}

model User {
  id            String             @id @default(cuid())
  email         String             @unique
  name          String?
  role          UserRole           @default(STAFF)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  supabaseId    String?            @unique
  orgId         String
  auditLogs     AuditLog[]
  progress      EmployeeProgress[]
  uploadedMedia LessonMedia[]
  quizResults   QuizResult[]
  org           Org                @relation(fields: [orgId], references: [id])
}

model Wine {
  id           String    @id @default(cuid())
  name         String
  type         DrinkType
  grapeVariety String
  tier         Tier
  description  String
  imageUrl     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  orgId        String
  quizzes      Quiz[]
  org          Org       @relation(fields: [orgId], references: [id])
}

model Liquor {
  id          String   @id @default(cuid())
  name        String   @unique
  type        String
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orgId       String
  org         Org      @relation(fields: [orgId], references: [id])
}

model Cocktail {
  id          String               @id @default(cuid())
  name        String
  baseLiquor  String
  type        DrinkType
  tier        Tier
  description String
  recipe      String
  imageUrl    String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  orgId       String
  org         Org                  @relation(fields: [orgId], references: [id])
  ingredients CocktailIngredient[]
}

model CocktailIngredient {
  id         String   @id @default(cuid())
  name       String
  cocktailId String
  cocktail   Cocktail @relation(fields: [cocktailId], references: [id])
}

model Module {
  id                String             @id @default(cuid())
  title             String
  orgId             String
  category          ModuleCategory     @default(GENERAL)
  createdAt         DateTime           @default(now())
  description       String?
  difficulty        DifficultyLevel    @default(BEGINNER)
  estimatedDuration Int?
  imageUrl          String?
  isPublished       Boolean            @default(false)
  orderIndex        Int?
  prerequisites     String[]
  tags              String[]
  updatedAt         DateTime           @updatedAt
  progress          EmployeeProgress[]
  lessons           Lesson[]
  org               Org                @relation(fields: [orgId], references: [id])

  @@index([orgId, isPublished])
  @@index([category, difficulty])
}

model Lesson {
  id           String             @id @default(cuid())
  title        String
  mediaUrl     String?
  moduleId     String
  orgId        String
  contentType  ContentType        @default(TEXT)
  createdAt    DateTime           @default(now())
  description  String?
  duration     Int?
  isPublished  Boolean            @default(false)
  isRequired   Boolean            @default(true)
  orderIndex   Int                @default(0)
  passingScore Int?
  updatedAt    DateTime           @updatedAt
  content      Json?
  progress     EmployeeProgress[]
  module       Module             @relation(fields: [moduleId], references: [id])
  org          Org                @relation(fields: [orgId], references: [id])
  media        LessonMedia[]
  quizzes      Quiz[]

  @@index([moduleId, orderIndex])
  @@index([orgId, isPublished])
}

model LessonMedia {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  description  String?
  lessonId     String?
  uploadedBy   String
  createdAt    DateTime @default(now())
  orgId        String
  lesson       Lesson?  @relation(fields: [lessonId], references: [id])
  org          Org      @relation(fields: [orgId], references: [id])
  uploader     User     @relation(fields: [uploadedBy], references: [id])

  @@index([lessonId])
  @@index([orgId, mimeType])
}

model EmployeeProgress {
  id           String         @id @default(cuid())
  completed    Boolean        @default(false)
  completedAt  DateTime?
  userId       String
  lessonId     String?
  attempts     Int            @default(0)
  createdAt    DateTime       @default(now())
  lastAccessed DateTime?
  moduleId     String?
  notes        String?
  score        Float?
  status       ProgressStatus @default(NOT_STARTED)
  timeSpent    Int?
  updatedAt    DateTime       @updatedAt
  lesson       Lesson?        @relation(fields: [lessonId], references: [id])
  module       Module?        @relation(fields: [moduleId], references: [id])
  user         User           @relation(fields: [userId], references: [id])

  @@unique([userId, lessonId])
  @@unique([userId, moduleId])
  @@index([userId, status])
  @@index([moduleId, status])
}

model Quiz {
  id        String         @id @default(cuid())
  title     String
  createdAt DateTime       @default(now())
  lessonId  String
  wineId    String?
  orgId     String
  lesson    Lesson         @relation(fields: [lessonId], references: [id])
  org       Org            @relation(fields: [orgId], references: [id])
  wine      Wine?          @relation(fields: [wineId], references: [id])
  questions QuizQuestion[]
  results   QuizResult[]
}

model QuizQuestion {
  id          String       @id @default(cuid())
  question    String
  explanation String?
  quizId      String
  options     QuizOption[]
  quiz        Quiz         @relation(fields: [quizId], references: [id])
}

model QuizOption {
  id         String       @id @default(cuid())
  optionText String
  isCorrect  Boolean
  questionId String
  question   QuizQuestion @relation(fields: [questionId], references: [id])
}

model QuizResult {
  id      String   @id @default(cuid())
  score   Int
  takenAt DateTime @default(now())
  quizId  String
  userId  String
  quiz    Quiz     @relation(fields: [quizId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  details   Json?
  tableName String?
  recordId  String?
  userId    String
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  orgId     String
  org       Org      @relation(fields: [orgId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([orgId, action])
  @@index([tableName, recordId])
}

enum UserRole {
  ADMIN
  STAFF
  MANAGER
}

enum Tier {
  LOW
  MEDIUM
  HIGH
}

enum DrinkType {
  COCKTAIL
  WINE
}

enum ModuleCategory {
  WINE
  SPIRITS
  COCKTAILS
  SERVICE
  COMPLIANCE
  GENERAL
  FOOD_PAIRING
  CUSTOMER_SERVICE
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ContentType {
  TEXT
  VIDEO
  INTERACTIVE
  QUIZ
  DOCUMENT
  AUDIO
  PRESENTATION
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
  LOCKED
}
