// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for Supabase Auth integration
model User {
  id        String   @id @default(cuid())
  ord_id    String    
  email     String   @unique
  role      UserRole @default(STAFF)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Supabase Auth fields
  supabaseId String? @unique
  name       String?

  quizResults QuizResult[]

  @@map("users")
}

// Cocktail model
model Cocktail {
  id          String   @id @default(cuid())
  org_id      String
  name        String
  type        DrinkType
  baseLiquor  String
  tier        Tier
  ingredients String[] // Array of ingredient strings
  description String
  recipe      String   // Steps or instructions
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cocktails")
}

// Wine model
model Wine {
  id          String   @id @default(cuid())
  name        String
  type        DrinkType
  grapeVariety String
  tier        Tier
  ingredients String[] // Array of ingredient strings (for blends)
  description String
  recipe      String?  // Optional winemaking notes
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  quizzes     Quiz[]

  @@map("wines")
}

// Liquor model for custom liquors
model Liquor {
  id          String   @id @default(cuid())
  name        String   @unique
  type        String   // e.g., Vodka, Gin, Rum, etc.
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("liquors")
}

// Quiz for Wine
model Quiz {
  id        String         @id @default(cuid())
  wine      Wine           @relation(fields: [wineId], references: [id])
  wineId    String
  title     String
  createdAt DateTime       @default(now())
  questions QuizQuestion[]
  results   QuizResult[]

  @@map("quizzes")
}

model QuizQuestion {
  id         String   @id @default(cuid())
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  quizId     String
  question   String
  options    String[] // Multiple choice options
  answer     String   // Correct answer
  explanation String? // Optional explanation for answer

  @@map("quiz_questions")
}

model QuizResult {
  id         String   @id @default(cuid())
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  quizId     String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  answers    String[] // User's selected answers (ordered by question)
  score      Int
  takenAt    DateTime @default(now())

  @@map("quiz_results")
}

// Enums
enum UserRole {
  ADMIN
  STAFF
}

enum DrinkType {
  COCKTAIL
  WINE
}

enum Tier {
  LOW
  MEDIUM
  HIGH
}
