generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Org {
  id        String     @id @default(cuid())
  name      String
  createdAt DateTime   @default(now())
  cocktails Cocktail[]
  lessons   Lesson[]
  liquors   Liquor[]
  modules   Module[]
  quizzes   Quiz[]
  users     User[]
  wines     Wine[]
  media     LessonMedia[]
  auditLogs AuditLog[]
}

model User {
  id          String             @id @default(cuid())
  email       String             @unique
  name        String?
  role        UserRole           @default(STAFF)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  supabaseId  String?            @unique
  orgId       String
  progress    EmployeeProgress[]
  quizResults QuizResult[]
  auditLogs   AuditLog[]
  uploadedMedia LessonMedia[]
  org         Org                @relation(fields: [orgId], references: [id])
}

model Wine {
  id           String    @id @default(cuid())
  name         String
  type         DrinkType
  grapeVariety String
  tier         Tier
  description  String
  imageUrl     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  orgId        String
  quizzes      Quiz[]
  org          Org       @relation(fields: [orgId], references: [id])
}

model Liquor {
  id          String   @id @default(cuid())
  name        String   @unique
  type        String
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orgId       String
  org         Org      @relation(fields: [orgId], references: [id])
}

model Cocktail {
  id          String               @id @default(cuid())
  name        String
  baseLiquor  String
  type        DrinkType
  tier        Tier
  description String
  recipe      String
  imageUrl    String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  orgId       String
  org         Org                  @relation(fields: [orgId], references: [id])
  ingredients CocktailIngredient[]
}

model CocktailIngredient {
  id         String   @id @default(cuid())
  name       String
  cocktailId String
  cocktail   Cocktail @relation(fields: [cocktailId], references: [id])
}

// Enhanced Module with LMS features
model Module {
  id                String             @id @default(cuid())
  title             String
  description       String?
  imageUrl          String?
  category          ModuleCategory     @default(GENERAL)
  difficulty        DifficultyLevel    @default(BEGINNER)
  estimatedDuration Int?               // in minutes
  isPublished       Boolean            @default(false)
  prerequisites     String[]           // array of module IDs
  tags              String[]
  orderIndex        Int?               // for sorting modules
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  orgId             String
  lessons           Lesson[]
  progress          EmployeeProgress[]
  org               Org                @relation(fields: [orgId], references: [id])

  @@index([orgId, isPublished])
  @@index([category, difficulty])
}

// Enhanced Lesson with rich content support
model Lesson {
  id           String             @id @default(cuid())
  title        String
  description  String?
  content      Json?              // Rich content structure (JSON)
  contentType  ContentType        @default(TEXT)
  orderIndex   Int                @default(0)
  duration     Int?               // estimated duration in minutes
  isRequired   Boolean            @default(true)
  passingScore Int?               // for quiz-type lessons
  mediaUrl     String?            // legacy field, consider removing later
  isPublished  Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  moduleId     String
  orgId        String
  progress     EmployeeProgress[]
  module       Module             @relation(fields: [moduleId], references: [id])
  org          Org                @relation(fields: [orgId], references: [id])
  quizzes      Quiz[]
  media        LessonMedia[]

  @@index([moduleId, orderIndex])
  @@index([orgId, isPublished])
}

// New: Media/File management for lessons
model LessonMedia {
  id           String   @id @default(cuid())
  filename     String   // stored filename
  originalName String   // original upload name
  mimeType     String
  size         Int      // file size in bytes
  url          String   // public URL
  description  String?
  lessonId     String?  // optional, media can exist without lesson
  uploadedBy   String   // user ID who uploaded
  createdAt    DateTime @default(now())
  orgId        String
  lesson       Lesson?  @relation(fields: [lessonId], references: [id])
  uploader     User     @relation(fields: [uploadedBy], references: [id])
  org          Org      @relation(fields: [orgId], references: [id])

  @@index([lessonId])
  @@index([orgId, mimeType])
}

// Enhanced EmployeeProgress with detailed tracking
model EmployeeProgress {
  id           String         @id @default(cuid())
  status       ProgressStatus @default(NOT_STARTED)
  score        Float?         // percentage score (0-100)
  timeSpent    Int?           // time spent in minutes
  attempts     Int            @default(0)
  lastAccessed DateTime?
  completed    Boolean        @default(false) // legacy field
  completedAt  DateTime?
  notes        String?        // user notes
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       String
  lessonId     String?        // can track module-level progress too
  moduleId     String?        // module-level progress
  lesson       Lesson?        @relation(fields: [lessonId], references: [id])
  module       Module?        @relation(fields: [moduleId], references: [id])
  user         User           @relation(fields: [userId], references: [id])

  @@unique([userId, lessonId])
  @@unique([userId, moduleId])
  @@index([userId, status])
  @@index([moduleId, status])
}

model Quiz {
  id        String         @id @default(cuid())
  title     String
  createdAt DateTime       @default(now())
  lessonId  String
  wineId    String?
  orgId     String
  lesson    Lesson         @relation(fields: [lessonId], references: [id])
  org       Org            @relation(fields: [orgId], references: [id])
  wine      Wine?          @relation(fields: [wineId], references: [id])
  questions QuizQuestion[]
  results   QuizResult[]
}

model QuizQuestion {
  id          String       @id @default(cuid())
  question    String
  explanation String?
  quizId      String
  options     QuizOption[]
  quiz        Quiz         @relation(fields: [quizId], references: [id])
}

model QuizOption {
  id         String       @id @default(cuid())
  optionText String
  isCorrect  Boolean
  questionId String
  question   QuizQuestion @relation(fields: [questionId], references: [id])
}

model QuizResult {
  id      String   @id @default(cuid())
  score   Int
  takenAt DateTime @default(now())
  quizId  String
  userId  String
  quiz    Quiz     @relation(fields: [quizId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
}

// New: Audit logging for security and compliance
model AuditLog {
  id        String     @id @default(cuid())
  action    String     // e.g., "MODULE_CREATED", "LESSON_UPDATED", "USER_LOGIN"
  details   Json?      // additional details about the action
  tableName String?    // which table was affected
  recordId  String?    // which record was affected
  userId    String     // who performed the action
  ipAddress String?
  userAgent String?
  createdAt DateTime   @default(now())
  orgId     String
  user      User       @relation(fields: [userId], references: [id])
  org       Org        @relation(fields: [orgId], references: [id])

  @@index([userId, createdAt])
  @@index([orgId, action])
  @@index([tableName, recordId])
}

// Enums
enum UserRole {
  ADMIN
  STAFF
  MANAGER
}

enum Tier {
  LOW
  MEDIUM
  HIGH
}

enum DrinkType {
  COCKTAIL
  WINE
}

// New LMS-specific enums
enum ModuleCategory {
  WINE
  SPIRITS
  COCKTAILS
  SERVICE
  COMPLIANCE
  GENERAL
  FOOD_PAIRING
  CUSTOMER_SERVICE
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ContentType {
  TEXT
  VIDEO
  INTERACTIVE
  QUIZ
  DOCUMENT
  AUDIO
  PRESENTATION
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
  LOCKED
}
